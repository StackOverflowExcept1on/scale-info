
running 1 test
registry PortableRegistry {
    types: [
        PortableType {
            id: 0,
            ty: Type {
                path: Path {
                    segments: [],
                },
                type_params: [],
                type_def: Primitive(
                    U32,
                ),
                docs: [],
            },
        },
        PortableType {
            id: 1,
            ty: Type {
                path: Path {
                    segments: [],
                },
                type_params: [],
                type_def: Primitive(
                    U64,
                ),
                docs: [],
            },
        },
        PortableType {
            id: 2,
            ty: Type {
                path: Path {
                    segments: [],
                },
                type_params: [],
                type_def: Sequence(
                    TypeDefSequence {
                        type_param: UntrackedSymbol {
                            id: 0,
                            marker: PhantomData<fn() -> core::any::TypeId>,
                        },
                    },
                ),
                docs: [],
            },
        },
        PortableType {
            id: 3,
            ty: Type {
                path: Path {
                    segments: [
                        "MyStruct",
                    ],
                },
                type_params: [],
                type_def: Composite(
                    TypeDefComposite {
                        fields: [
                            Field {
                                name: Some(
                                    "primitive",
                                ),
                                ty: UntrackedSymbol {
                                    id: 0,
                                    marker: PhantomData<fn() -> core::any::TypeId>,
                                },
                                type_name: None,
                                docs: [],
                            },
                            Field {
                                name: Some(
                                    "vec_of_u32",
                                ),
                                ty: UntrackedSymbol {
                                    id: 2,
                                    marker: PhantomData<fn() -> core::any::TypeId>,
                                },
                                type_name: None,
                                docs: [],
                            },
                        ],
                    },
                ),
                docs: [],
            },
        },
        PortableType {
            id: 4,
            ty: Type {
                path: Path {
                    segments: [
                        "MyStructSecond",
                    ],
                },
                type_params: [],
                type_def: Composite(
                    TypeDefComposite {
                        fields: [
                            Field {
                                name: Some(
                                    "vec_of_u32",
                                ),
                                ty: UntrackedSymbol {
                                    id: 2,
                                    marker: PhantomData<fn() -> core::any::TypeId>,
                                },
                                type_name: None,
                                docs: [],
                            },
                            Field {
                                name: Some(
                                    "second",
                                ),
                                ty: UntrackedSymbol {
                                    id: 3,
                                    marker: PhantomData<fn() -> core::any::TypeId>,
                                },
                                type_name: None,
                                docs: [],
                            },
                        ],
                    },
                ),
                docs: [],
            },
        },
    ],
}
Result {4: 0, 2: 1, 0: 2, 3: 3}
New Mappings {
    2: 1,
    3: 3,
    0: 2,
    4: 0,
}
registry: PortableRegistry {
    types: [
        PortableType {
            id: 0,
            ty: Type {
                path: Path {
                    segments: [
                        "MyStructSecond",
                    ],
                },
                type_params: [],
                type_def: Composite(
                    TypeDefComposite {
                        fields: [
                            Field {
                                name: Some(
                                    "vec_of_u32",
                                ),
                                ty: UntrackedSymbol {
                                    id: 1,
                                    marker: PhantomData<fn() -> core::any::TypeId>,
                                },
                                type_name: None,
                                docs: [],
                            },
                            Field {
                                name: Some(
                                    "second",
                                ),
                                ty: UntrackedSymbol {
                                    id: 3,
                                    marker: PhantomData<fn() -> core::any::TypeId>,
                                },
                                type_name: None,
                                docs: [],
                            },
                        ],
                    },
                ),
                docs: [],
            },
        },
        PortableType {
            id: 1,
            ty: Type {
                path: Path {
                    segments: [],
                },
                type_params: [],
                type_def: Sequence(
                    TypeDefSequence {
                        type_param: UntrackedSymbol {
                            id: 2,
                            marker: PhantomData<fn() -> core::any::TypeId>,
                        },
                    },
                ),
                docs: [],
            },
        },
        PortableType {
            id: 2,
            ty: Type {
                path: Path {
                    segments: [],
                },
                type_params: [],
                type_def: Primitive(
                    U32,
                ),
                docs: [],
            },
        },
        PortableType {
            id: 3,
            ty: Type {
                path: Path {
                    segments: [
                        "MyStruct",
                    ],
                },
                type_params: [],
                type_def: Composite(
                    TypeDefComposite {
                        fields: [
                            Field {
                                name: Some(
                                    "primitive",
                                ),
                                ty: UntrackedSymbol {
                                    id: 2,
                                    marker: PhantomData<fn() -> core::any::TypeId>,
                                },
                                type_name: None,
                                docs: [],
                            },
                            Field {
                                name: Some(
                                    "vec_of_u32",
                                ),
                                ty: UntrackedSymbol {
                                    id: 1,
                                    marker: PhantomData<fn() -> core::any::TypeId>,
                                },
                                type_name: None,
                                docs: [],
                            },
                        ],
                    },
                ),
                docs: [],
            },
        },
    ],
}
test portable::tests::resolver_retain_recursive_ids ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 23 filtered out; finished in 0.00s

